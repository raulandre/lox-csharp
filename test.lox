fun assert(condition, message)
{
    if(!condition)
    {
        print(message);
        exit(1);
    }
}

var fib = fun (n)
{
    if(n <= 1) return n;
    return fib(n-1) + fib(n-2);
};

var fact = fun (n)
{
    if(n == 0) return 1;
    return n * fact(n-1);
};

var a = 1;
assert(a == 1, "Failed to declare number variable");

var b = "b";
assert(b == "b", "Failed to declare number variable");

var c = true;
assert(c == true, "Failed to declare boolean variable");

assert(fun (){}() == nil, "Function should default return value to nil");
assert(fun (){ return 1; }() == 1, "Function should return specified value");

var n = 5;
var t = 0;
while(n > 0) {
        t = t + 1;
        n = n - 1;
}
// For loops decay into while loops, so this works for both
assert(t == 5, "Wrong amount of iterations in while loop");

assert(fib(10) == 55, "Failed to calculate fibonacci sequence");
assert(fact(5) == 120, "Failed to calculate factorial");
{
    assert(fib(10) == 55, "Failed to calculate fibonacci sequence in separate environment");
    assert(fact(5) == 120, "Failed to calculate factorial in separate environment");
}

{
    var a = 123;
    assert(a != 1, "Failed to create variable with same name in different environment");
}

var makeCounter = fun() {
	var i = 0;
	fun count() {
		i = i + 1;
		return i;
	}

	return count;
};

var counter = makeCounter();
assert(counter() == 1, "Closure not working as expected");
assert(counter() == 2, "Closure not working as expected");
assert(counter() == 3, "Closure not working as expected");

exit(0);
